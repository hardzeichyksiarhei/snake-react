{"version":3,"sources":["hooks/useKeyPress.ts","components/SnakeGrid.tsx","components/SnakeCell.tsx","components/Snake.tsx","components/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","e","key","upHandler","useEffect","window","addEventListener","removeEventListener","SnakeGrid","props","style","display","gridTemplateColumns","cols","gridTemplateRows","rows","className","children","SnakeCell","classNames","isSnake","isSnakeHead","isFood","DIRECTIONS","x","y","createAndValidateFood","snake","row","col","food","Math","floor","random","findIndex","segment","createDefaultSnake","snakeHead","createGrid","grid","push","Snake","isGaming","setIsGaming","delay","setDelay","setGrid","setSnake","setFood","text","direction","setDirection","coord","head","isToEat","limitByRow","limitByCol","newSnakePosition","oldSnake","newHead","_","oldDelay","slice","tail","is_losing","useInterval","alert","refreshGame","pressUp","pressDown","pressLeft","pressRight","startGame","stopGame","map","ButtonGroup","variant","color","aria-label","Button","onClick","disabled","Settings","inputRow","useRef","inputCol","isValidRow","setIsValidRow","isValidCol","setIsValidCol","validationRule","Grid","container","spacing","item","xs","TextField","id","label","fullWidth","margin","inputRef","helperText","error","type","defaultValue","marginTop","current","value","settings","onSave","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","paper","padding","palette","secondary","App","classes","isRender","app","setApp","AppBar","position","Toolbar","Typography","Container","maxWidth","Paper","oldApp","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9a3360c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useKeyPress = (targetKey: string) => {\n    const [keyPressed, setKeyPressed] = useState(false);\n\n    function downHandler(e: KeyboardEvent) {\n        if (e.key === targetKey) {\n            setKeyPressed(true);\n        }\n    }\n\n    const upHandler = (e: KeyboardEvent) => {\n        if (e.key === targetKey) {\n            setKeyPressed(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('keydown', downHandler);\n        window.addEventListener('keyup', upHandler);\n        return () => {\n            window.removeEventListener('keydown', downHandler)\n            window.removeEventListener('keyup', upHandler)\n        }\n    })\n\n    return keyPressed\n}\n\nexport default useKeyPress","import React from 'react'\r\n\r\n\r\ninterface IProps {\r\n    children: React.ReactNode,\r\n    rows: number,\r\n    cols: number\r\n}\r\n\r\nconst SnakeGrid = (props: IProps) => {\r\n    return (\r\n        <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: `repeat(${props.cols}, 1fr)`,\r\n            gridTemplateRows: `repeat(${props.rows}, 1fr)`\r\n        }} className=\"snake-grid\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SnakeGrid","import React from 'react'\r\nimport classNames from 'classnames';\r\n\r\ninterface IProps {\r\n    isSnake: boolean,\r\n    isSnakeHead: boolean,\r\n    isFood: boolean\r\n}\r\n\r\nconst SnakeCell = (props: IProps) => {\r\n    return (\r\n        <div className={classNames({\r\n            'snake-cell': true,\r\n            'snake-cell--snake': props.isSnake,\r\n            'snake-cell--snake-head': props.isSnakeHead,\r\n            'snake-cell--food': props.isFood\r\n        })}></div>\r\n    )\r\n}\r\n\r\nexport default SnakeCell","import React, { useState, useEffect } from 'react';\nimport useInterval from '@use-it/interval';\n\nimport './Snake.sass'\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport useKeyPress from '../hooks/useKeyPress';\nimport SnakeGrid from './SnakeGrid';\nimport SnakeCell from './SnakeCell';\n\ninterface ISnake {\n    x: number,\n    y: number\n}\n\ninterface IDirection {\n    x: number,\n    y: number\n}\n\ninterface IDirections {\n    UP: IDirection,\n    DOWN: IDirection,\n    LEFT: IDirection,\n    RIGHT: IDirection\n}\n\ninterface IFood {\n    x: number,\n    y: number\n}\n\nconst DIRECTIONS: IDirections = {\n    UP: { x: 0, y: -1 },\n    DOWN: { x: 0, y: 1 },\n    LEFT: { x: -1, y: 0 },\n    RIGHT: { x: 1, y: 0 }\n}\n\nconst createAndValidateFood = (snake: ISnake[], row: number, col: number): IFood => {\n    let food: IFood = {\n        x: 0,\n        y: 0\n    }\n    do {\n        food.x = Math.floor(Math.random() * col)\n        food.y = Math.floor(Math.random() * row)\n    } while (snake.findIndex(segment => segment.x === food.x && segment.y === food.y) !== -1)\n\n    return food\n}\n\nconst createDefaultSnake = (row: number, col: number): ISnake[] => {\n    const snakeHead: ISnake = {\n        x: Math.floor(row / 2),\n        y: Math.floor(col / 2)\n    }\n    \n    return [\n        snakeHead,\n        { x: snakeHead.x, y: snakeHead.y - 1 },\n        { x: snakeHead.x, y: snakeHead.y - 2 }\n    ]\n}\n\nconst createGrid = (rows: number, cols: number) => {\n    let grid = []\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            grid.push({ x: col, y: row })\n        }\n    }\n    return grid\n}\n\nconst Snake = (props: { row: number; col: number } = { row: 12, col: 12 }) => {\n    let [isGaming, setIsGaming] = useState(false)\n    let [delay, setDelay] = useState<number | null>(100)\n\n    let [grid, setGrid] = useState(() => createGrid(props.row, props.col))\n\n    let [snake, setSnake] = useState(() => createDefaultSnake(props.row, props.col))\n    \n    let [food, setFood] = useState(() => createAndValidateFood(snake, props.col, props.row))\n\n    let [direction, setDirection] = useState({\n        text: 'DOWN',\n        ...DIRECTIONS.DOWN\n    })\n\n    const isSnake = (x: number, y: number): boolean => {\n        return snake.findIndex(coord => coord.x === x && coord.y === y) !== -1\n    }\n\n    const isSnakeHead = (x: number, y: number): boolean => {\n        const [head] = snake\n        return x === head.x && y === head.y\n    }\n\n    const isFood = (x: number, y: number): boolean => {\n        return x === food.x && y === food.y\n    }\n\n    const isToEat = (x: number, y: number): boolean => {\n        return x === food.x && y === food.y\n    }\n\n    const limitByRow = (y: number): number => {\n        if (y >= props.row) return 0\n        if (y < 0) return props.row - 1\n        return y\n    }\n\n    const limitByCol = (x: number): number => {\n        if (x >= props.col) return 0\n        if (x < 0) return props.col - 1\n        return x\n    }\n\n    const newSnakePosition = (oldSnake: ISnake[]): ISnake[] => {\n        const [head] = oldSnake\n        const newHead: ISnake = {\n            x: limitByCol(head.x + direction.x),\n            y: limitByRow(head.y + direction.y)\n        }\n        if (isToEat(newHead.x, newHead.y)) {\n            setFood(_ => createAndValidateFood(snake, props.col, props.row))\n            setDelay(oldDelay => {\n                if (oldDelay && oldDelay >= 20) return oldDelay - 2\n                return oldDelay\n            })\n            return [newHead, ...oldSnake]\n        }\n        return [newHead, ...oldSnake.slice(0, -1)]\n    }\n\n    let [head, ...tail] = snake\n    const is_losing = () => tail.findIndex(segment => segment.x === head.x && segment.y === head.y) !== -1\n\n    useInterval(() => {\n        if (!isGaming) return\n        if (is_losing()) {\n            alert(\"Losing...\")\n            setDelay(null)\n            refreshGame()\n            return\n        }\n        setSnake(oldSnake => newSnakePosition(oldSnake))\n    }, delay)\n\n    const pressUp = useKeyPress('ArrowUp');\n    const pressDown = useKeyPress('ArrowDown');\n    const pressLeft = useKeyPress('ArrowLeft');\n    const pressRight = useKeyPress('ArrowRight');\n\n    useEffect(() => {        \n        if (pressUp && direction.text !== 'DOWN') setDirection({ text: 'UP', ...DIRECTIONS.UP })\n        if (pressDown && direction.text !== 'UP') setDirection({ text: 'DOWN', ...DIRECTIONS.DOWN })\n        if (pressLeft && direction.text !== 'RIGHT') setDirection({ text: 'LEFT', ...DIRECTIONS.LEFT })\n        if (pressRight && direction.text !== 'LEFT') setDirection({ text: 'RIGHT', ...DIRECTIONS.RIGHT })\n    }, [pressUp, pressDown, pressLeft, pressRight])\n\n    const startGame = () => { setIsGaming(true) }\n    const stopGame = () => { setIsGaming(false) }\n    const refreshGame = () => {\n        setIsGaming(false)\n        setGrid(() => createGrid(props.row, props.col))\n        setSnake(() => createDefaultSnake(props.row, props.col))\n        setDelay(100)\n        setDirection({ text: 'DOWN', ...DIRECTIONS.DOWN })\n        setFood(() => createAndValidateFood(snake, props.row, props.col))\n    }\n\n    useEffect(refreshGame, [props.row, props.col])\n\n    return (\n        <div className=\"snake-wrapper\">\n            <SnakeGrid rows={props.row} cols={props.col}>\n                {\n                    grid.map(({ x, y }) => {\n                        return <SnakeCell key={`${x}-${y}`} isSnake={isSnake(x, y)} isSnakeHead={isSnakeHead(x, y)} isFood={isFood(x, y)}></SnakeCell>;\n                    })\n                }\n            </SnakeGrid>\n            <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"text primary button group\">\n                <Button onClick={startGame} disabled={isGaming}>\n                    Start Game\n                </Button>\n                <Button color=\"secondary\" onClick={stopGame} disabled={!isGaming}>\n                    Stop Game\n                </Button>\n                <Button color=\"default\" onClick={refreshGame}>\n                    Refresh Game\n                </Button>\n            </ButtonGroup>\n        </div>\n    );\n}\n\nexport default Snake;","\nimport React, { useState, useRef } from 'react';\nimport { Button, TextField, Grid } from '@material-ui/core';\n\nimport './Snake.sass'\n\nconst Settings = (props: { onSave: Function }) => {\n    const inputRow = useRef<HTMLInputElement>(null);\n    const inputCol = useRef<HTMLInputElement>(null);\n\n    const [isValidRow, setIsValidRow] = useState(true)\n    const [isValidCol, setIsValidCol] = useState(true)\n\n    const validationRule = {\n        min: 8,\n        max: 30\n    }\n\n    const settingsSave = () => {\n        setIsValidRow(true)\n        setIsValidCol(true)\n\n        if (!inputRow.current || !inputCol.current) return\n        let row = +inputRow.current.value;\n        let col = +inputCol.current.value;\n\n        if (row < validationRule.min || row > validationRule.max) {\n            setIsValidRow(false)\n            return\n        }\n        if (col < validationRule.min || col > validationRule.max) {\n            setIsValidCol(false)\n            return\n        }\n\n        const settings = { row, col }\n        props.onSave(settings)\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                <Grid item xs={6}>\n                    <TextField\n                        id=\"row\"\n                        label=\"Row\"\n                        fullWidth\n                        margin=\"normal\"\n                        inputRef={inputRow}\n                        helperText={`Min: ${validationRule.min}, Max: ${validationRule.max}`}\n                        error={!isValidRow}\n                        type=\"number\"\n                        defaultValue=\"16\"\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <TextField\n                        id=\"col\"\n                        label=\"Col\"\n                        fullWidth\n                        margin=\"normal\"\n                        inputRef={inputCol}\n                        helperText={`Min: ${validationRule.min}, Max: ${validationRule.max}`}\n                        error={!isValidCol}\n                        type=\"number\"\n                        defaultValue=\"16\"\n                    />\n                </Grid>\n            </Grid>\n            <Button style={{ marginTop: 15 }} variant=\"contained\" color=\"primary\" onClick={settingsSave}>Render</Button>\n        </div>\n    )\n}\n\nexport default Settings","import React, { useState } from 'react';\nimport './App.sass';\nimport Snake from './components/Snake'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Container, Grid, Paper } from '@material-ui/core';\nimport Settings from './components/Settings';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(4),\n    color: theme.palette.text.secondary,\n  },\n}))\n\nconst App = () => {\n  const classes = useStyles()\n\n  let [app, setApp] = useState({\n    isRender: false,\n    settings: {\n      row: 16,\n      col: 16\n    }\n  })\n\n  const saveHandler = (settings: { row: number; col: number; }) => {\n    setApp(oldApp => {\n      return {\n        ...oldApp,\n        isRender: true,\n        settings\n      }\n    })\n  }\n\n  return (\n    <div className=\"snake-app\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Shake\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container className=\"snake-content\" maxWidth=\"lg\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Paper className={classes.paper}>\n              <Settings onSave={saveHandler}/>\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper className={classes.paper}>\n              {\n                app.isRender ? <Snake {...app.settings} /> : 'Empty'\n              }\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}